package gen

import (
	"list"
	"path"

  gen "github.com/hofstadter-io/hof/schema/gen"
  dm "github.com/hofstadter-io/hof/schema/dm"

  "github.com/hofstadter-io/hofmod-server/schema"
)

#ServerGen: gen.#HofGenerator & {
	// User inputs
  Outdir: string | *"./"
	Module: string
  PackageName: "" | *"github.com/hofstadter-io/hofmod-server"

  Server: schema.#Server
	Datamodel: dm.#Datamodel & {
		Modelsets: {
			Custom: dm.#Modelset
			Builtin: dm.#Modelset
		}
	}

  // Internal
  In: {
    SERVER: Server
		MODELS: {
			Custom: Datamodel.Modelsets.Custom
			Builtin: Datamodel.Modelsets.Builtin
		}
		ModuleImport: path.Clean("\(Module)/\(Outdir)")
  }

  OutdirConfig: {
    CiOutdir: string | *"\(Outdir)/ci/\(In.SERVER.serverName)"
    ServerOutdir: string | *"\(Outdir)/server"
  }

  basedir: "server/\(In.SERVER.serverName)"

	// Actual files generated by hof, flattened into a single list
  // Out: [...hof.#HofGeneratorFile] & list.FlattenN(_All , 1)
  Out: [...gen.#HofGeneratorFile] & _All

  // Combine everything together and output files that might need to be generated
  _All: [
   for _, F in _OnceFiles { F },

   for _, F in _BuiltinModelFiles { F },
   for _, F in _CustomModelFiles { F },

   for _, F in _L1_RouteFiles { F },
   for _, F in _L2_RouteFiles { F },
   for _, F in _L3_RouteFiles { F },

   for _, F in _L1_ResourceFiles { F },
  ]

  // Files that are not repeatedly used, they are generated once for the whole CLI
  _OnceFiles: [...gen.#HofGeneratorFile] & [
    {
      TemplatePath: "config.go"
      Filepath: "\(Outdir)/config/config.go"
    },
		{
			TemplatePath: "mailer/mailgun.go"
			Filepath: "\(Outdir)/mailer/mailgun.go"
		},
		{
			TemplatePath: "mailer/emails.go"
			Filepath: "\(Outdir)/mailer/emails.go"
		},
		{
			TemplatePath: "db/common.go"
			Filepath: "\(Outdir)/db/common.go"
		},
		{
			TemplatePath: "db/migrate.go"
			Filepath: "\(Outdir)/db/migrate.go"
		},
		{
			TemplatePath: "db/seed.go"
			Filepath: "\(Outdir)/db/seed.go"
		},
		{
			TemplatePath: "db/postgres.go"
			Filepath: "\(Outdir)/db/postgres.go"
		},
		{
			TemplatePath: "client/do.go"
			Filepath: "\(Outdir)/client/do.go"
		},
		{
			TemplatePath: "client/client.go"
			Filepath: "\(Outdir)/client/client.go"
		},
    {
      TemplatePath: "server.go"
      Filepath: "\(OutdirConfig.ServerOutdir)/server.go"
    },
    {
      TemplatePath: "router.go"
      Filepath: "\(OutdirConfig.ServerOutdir)/router.go"
    },
    {
      TemplatePath: "middleware.go"
      Filepath: "\(OutdirConfig.ServerOutdir)/middleware.go"
    },
		{
			TemplatePath: "auth/middleware.go"
			Filepath: "\(OutdirConfig.ServerOutdir)/auth/middleware.go"
		},
		{
			TemplatePath: "auth/routes.go"
			Filepath: "\(OutdirConfig.ServerOutdir)/auth/routes.go"
		},
		{
			TemplatePath: "auth/pword.go"
			Filepath: "\(OutdirConfig.ServerOutdir)/auth/pword.go"
		},
		{
			TemplatePath: "auth/apikey.go"
			Filepath: "\(OutdirConfig.ServerOutdir)/auth/apikey.go"
		},
		{
			TemplatePath: "auth/accts.go"
			Filepath: "\(OutdirConfig.ServerOutdir)/auth/accts.go"
		},
		if Server.EntityConfig.users {
			{
				TemplatePath: "auth/user.go"
				Filepath: "\(OutdirConfig.ServerOutdir)/auth/user.go"
			}
		}
		if Server.EntityConfig.groups {
			{
				TemplatePath: "auth/group.go"
				Filepath: "\(OutdirConfig.ServerOutdir)/auth/group.go"
			}
		}
		if Server.EntityConfig.organizations {
			{
				TemplatePath: "auth/organization.go"
				Filepath: "\(OutdirConfig.ServerOutdir)/auth/organization.go"
			}
		}
  ]

	// Models
  _BuiltinModelFiles: [...gen.#HofGeneratorFile] & [ // List comprehension
    for _, M in Datamodel.Modelsets.Builtin.MigrateOrder
    {
      In: {
				MODEL: {
					M
          PackageName: "dm"
				}
      }
      TemplatePath: "dm/model.go"
      Filepath: "\(Outdir)/dm/\(M.modelName).go"
    }
  ]

  _CustomModelFiles: [...gen.#HofGeneratorFile] & [ // List comprehension
    for _, M in Datamodel.Modelsets.Custom.MigrateOrder
    {
      In: {
				MODEL: {
					M
          PackageName: "dm"
				}
      }
      TemplatePath: "dm/model.go"
      Filepath: "\(Outdir)/dm/\(M.modelName).go"
    }
  ]

	// Routes
  _L1_RouteFiles: [...gen.#HofGeneratorFile] & list.FlattenN([[
    for _, R in Server.Routes
    {
      In: {
        ROUTE: {
          R
          PackageName: "routes"
        }
      }
      TemplatePath: "route.go"
      Filepath: "\(OutdirConfig.ServerOutdir)/routes/\(In.ROUTE.name).go"
		}
	]], 1)

  _L2_RouteList: [ for P in _L1_RouteFiles if len(P.In.ROUTE.Routes) > 0 {
    [ for R in P.In.ROUTE.Routes { R,  Parent: { name: P.In.ROUTE.name } }]
  }]
  _L2_RouteFiles: [...gen.#HofGeneratorFile] & [ // List comprehension
    for _, R in list.FlattenN(_L2_RouteList, 1)
    {
      In: {
				ROUTE: {
					R
          PackageName: R.Parent.name
				}
      }
      TemplatePath: "route.go"
      Filepath: "\(OutdirConfig.ServerOutdir)/routes/\(R.Parent.name)/\(R.name).go"
    }
  ]

  _L3_RouteList: [ for P in _L2_RouteFiles if len(P.In.ROUTE.Routes) > 0 {
    [ for R in P.In.ROUTE.Routes { R,  Parent: { name: P.In.ROUTE.name, Parent: P.In.ROUTE.Parent } }]
  }]
  _L3_RouteFiles: [...gen.#HofGeneratorFile] & [ // List comprehension
    for _, R in list.FlattenN(_L3_RouteList, 1)
    {
      In: {
				ROUTE: {
					R
          PackageName: R.Parent.name
				}
      }
      TemplatePath: "route.go"
      Filepath: "\(OutdirConfig.ServerOutdir)/routes/\(R.Parent.Parent.name)/\(R.Parent.name)/\(R.name).go"
    }
  ]

	// Resource Routes
  _L1_ResourceFiles: [...gen.#HofGeneratorFile] & [
    for _, R in Server.Resources
    {
      In: {
        RESOURCE: {
          R
          PackageName: "resources"
        }
      }
      TemplatePath: "resource.go"
      Filepath: "\(OutdirConfig.ServerOutdir)/resources/\(In.RESOURCE.name).go"
		}
	]

	...
}

